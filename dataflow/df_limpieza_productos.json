{
	"name": "df_limpieza_productos",
	"properties": {
		"folder": {
			"name": "Silver"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_tabla_productos",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_tabla_productos_catMant",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_silver_tabla_productos",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          prodId as string,",
				"          prodKey as string,",
				"          name as string,",
				"          cost as string,",
				"          line as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source(output(",
				"          prodId as string,",
				"          category as string,",
				"          subcategory as string,",
				"          maintenance as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(CategoryKey = concat(split(prodKey,'-')[1], '_', split(prodKey,'-')[2]),",
				"          cost = coalesce(cost, \"-1\")) ~> derivedColumn1",
				"derivedColumn1, source2 join(CategoryKey == source2@prodId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 cast(output(",
				"          prodId as integer,",
				"          cost as decimal(10,0)",
				"     ),",
				"     errors: true) ~> cast1",
				"join1 select(mapColumn(",
				"          prodId = source1@prodId,",
				"          prodKey,",
				"          name,",
				"          cost,",
				"          line,",
				"          CategoryKey,",
				"          prodIdB = source2@prodId,",
				"          category,",
				"          subcategory,",
				"          maintenance",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"cast1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          prodId as integer,",
				"          prodKey as string,",
				"          name as string,",
				"          cost as decimal(9,2),",
				"          line as string,",
				"          category as string,",
				"          subcategory as string,",
				"          maintenance as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          prodId,",
				"          prodKey,",
				"          name,",
				"          cost,",
				"          line,",
				"          category,",
				"          subcategory,",
				"          maintenance",
				"     )) ~> sink1"
			]
		}
	}
}